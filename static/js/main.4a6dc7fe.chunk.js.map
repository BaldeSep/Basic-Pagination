{"version":3,"sources":["index.js"],"names":["Post","props","postTitle","postBody","Posts","state","posts","postsResource","totalShown","pageNumber","handleChange","bind","handleClick","total","limit","Math","ceil","fetch","this","then","response","json","data","forEach","post","addPosts","catch","err","console","error","push","title","body","id","setState","e","newPageNumber","parseInt","target","textContent","howMany","buttons","i","key","onClick","getPostStartIndex","slice","getPostsEndIndex","getPosts","value","length","getNumberOfPages","generatePaginationButtons","onChange","getPostList","map","React","Component","ReactDom","render","document","getElementById"],"mappings":"mQAGA,SAASA,EAAKC,GACZ,OACE,6BACE,4BAAKA,EAAMC,WACX,2BAAID,EAAME,W,IAKVC,E,YACJ,WAAYH,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CACXC,MAAO,GACPC,cAAe,6CACfC,WAAY,GACZC,WAAY,GAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBATF,E,8EAYFE,EAAOC,GACtB,OAAOC,KAAKC,KAAKH,EAAQC,K,iCAGf,IAAD,OACTG,MAAMC,KAAKb,MAAME,eACdY,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJA,EAAKC,SAAQ,SAAAC,GACX,EAAKC,SAASD,SAGjBE,OAAM,SAAAC,GACLC,QAAQC,MAAMF,Q,+BAIXH,GACP,IAAIlB,EAAK,YAAOY,KAAKb,MAAMC,OAC3BA,EAAMwB,KAAK,CACT5B,UAAWsB,EAAKO,MAChB5B,SAAUqB,EAAKQ,KACfC,GAAIT,EAAKS,KAEXf,KAAKgB,SAAS,CACZ5B,Y,kCAIQ6B,GACV,IAAIC,EAAgBC,SAASF,EAAEG,OAAOC,aACtCrB,KAAKgB,SAAS,CACZzB,WAAY2B,M,gDAIUI,GAExB,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAASE,IAC3BD,EAAQX,KACN,4BAAQa,IAAKD,EAAGE,QAAS1B,KAAKN,aAC3B8B,EAAI,IAIX,OAAOD,I,0CAIP,OAAQvB,KAAKb,MAAMI,WAAa,GAAKS,KAAKb,MAAMG,a,yCAIhD,OAAOU,KAAK2B,oBAAsB3B,KAAKb,MAAMG,a,oCAS7C,OALYU,KAAKb,MAAMC,MAAMwC,MAC3B5B,KAAK2B,oBACL3B,KAAK6B,sB,0CAOP7B,KAAK8B,a,mCAGMb,GACXjB,KAAKgB,SAAS,CAAE1B,WAAY6B,SAASF,EAAEG,OAAOW,OAAQxC,WAAY,M,+BAIlE,OACE,6BACE,qDAA2BS,KAAKb,MAAMC,MAAM4C,QAC5C,oDAEGhC,KAAKiC,iBACJjC,KAAKb,MAAMC,MAAM4C,OACjBhC,KAAKb,MAAMG,aAGf,4CAAkBU,KAAKb,MAAMI,YAC7B,6BACGS,KAAKkC,0BACJlC,KAAKiC,iBACHjC,KAAKb,MAAMC,MAAM4C,OACjBhC,KAAKb,MAAMG,cAIjB,4BAAQyC,MAAO/B,KAAKb,MAAMG,WAAY6C,SAAUnC,KAAKR,cACnD,4BAAQuC,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,OAAd,aAED/B,KAAKoC,cAAcC,KAAI,SAAA/B,GAAI,OAC1B,kBAACxB,EAAD,CACE2C,IAAKnB,EAAKS,GACV/B,UAAWsB,EAAKtB,UAChBC,SAAUqB,EAAKrB,mB,GAxHPqD,IAAMC,WAgI1BC,IAASC,OAAO,kBAACvD,EAAD,MAAWwD,SAASC,eAAe,W","file":"static/js/main.4a6dc7fe.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nfunction Post(props) {\n  return (\n    <div>\n      <h2>{props.postTitle}</h2>\n      <p>{props.postBody}</p>\n    </div>\n  );\n}\n\nclass Posts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      postsResource: \"https://jsonplaceholder.typicode.com/posts\",\n      totalShown: 10,\n      pageNumber: 1\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getNumberOfPages(total, limit) {\n    return Math.ceil(total / limit);\n  }\n\n  getPosts() {\n    fetch(this.state.postsResource)\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        data.forEach(post => {\n          this.addPosts(post);\n        });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  addPosts(post) {\n    let posts = [...this.state.posts];\n    posts.push({\n      postTitle: post.title,\n      postBody: post.body,\n      id: post.id\n    });\n    this.setState({\n      posts\n    });\n  }\n\n  handleClick(e) {\n    let newPageNumber = parseInt(e.target.textContent);\n    this.setState({\n      pageNumber: newPageNumber\n    });\n  }\n\n  generatePaginationButtons(howMany) {\n    let buttons = [];\n    for (let i = 0; i < howMany; i++) {\n      buttons.push(\n        <button key={i} onClick={this.handleClick}>\n          {i + 1}\n        </button>\n      );\n    }\n    return buttons;\n  }\n\n  getPostStartIndex() {\n    return (this.state.pageNumber - 1) * this.state.totalShown;\n  }\n\n  getPostsEndIndex() {\n    return this.getPostStartIndex() + this.state.totalShown;\n  }\n\n  getPostList() {\n    let posts = this.state.posts.slice(\n      this.getPostStartIndex(),\n      this.getPostsEndIndex()\n    );\n\n    return posts;\n  }\n\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  handleChange(e) {\n    this.setState({ totalShown: parseInt(e.target.value), pageNumber: 1 });\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Total Number of Posts: {this.state.posts.length}</p>\n        <p>\n          Total Number of Pages:\n          {this.getNumberOfPages(\n            this.state.posts.length,\n            this.state.totalShown\n          )}\n        </p>\n        <p>Current Page: {this.state.pageNumber}</p>\n        <div>\n          {this.generatePaginationButtons(\n            this.getNumberOfPages(\n              this.state.posts.length,\n              this.state.totalShown\n            )\n          )}\n        </div>\n        <select value={this.state.totalShown} onChange={this.handleChange}>\n          <option value=\"10\">Show 10</option>\n          <option value=\"20\">Show 20</option>\n          <option value=\"30\">Show 30</option>\n          <option value=\"40\">Show 40</option>\n          <option value=\"50\">Show 50</option>\n          <option value=\"100\">Show 100</option>\n        </select>\n        {this.getPostList().map(post => (\n          <Post\n            key={post.id}\n            postTitle={post.postTitle}\n            postBody={post.postBody}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDom.render(<Posts />, document.getElementById(\"root\"));\n"],"sourceRoot":""}